/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

/** Configuration parameters */
export interface ConfigParams {
  /** App Key */
  appKey: string
  /** App Secret */
  appSecret: string
  /** Access Token */
  accessToken: string
  /**
   * HTTP API url
   * test env is https://openapi.longbridge.xyz
   */
  httpUrl?: string
  /**
   * Websocket url for trade API (default:
   * "wss://openapi-trade.longportapp.com")
   */
  tradeWsUrl?: string
  /** Language identifier (default: Language.EN) */
  language?: Language
}
/** Topic type */
export const enum TopicType {
  /** Private notification for trade */
  Private = 0
}
export const enum OrderStatus {
  /** Unknown */
  Unknown = 0,
  /** Not reported */
  NotReported = 1,
  /** Not reported (Replaced Order) */
  ReplacedNotReported = 2,
  /** Not reported (Protected Order) */
  ProtectedNotReported = 3,
  /** Not reported (Conditional Order) */
  VarietiesNotReported = 4,
  /** Filled */
  Filled = 5,
  /** Wait To New */
  WaitToNew = 6,
  /** New */
  New = 7,
  /** Wait To Replace */
  WaitToReplace = 8,
  /** Pending Replace */
  PendingReplace = 9,
  /** Replaced */
  Replaced = 10,
  /** Partial Filled */
  PartialFilled = 11,
  /** Wait To Cancel */
  WaitToCancel = 12,
  /** Pending Cancel */
  PendingCancel = 13,
  /** Rejected */
  Rejected = 14,
  /** Canceled */
  Canceled = 15,
  /** Expired */
  Expired = 16,
  /** Partial Withdrawal */
  PartialWithdrawal = 17
}
export const enum OrderSide {
  /** Unknown */
  Unknown = 0,
  /** Buy */
  Buy = 1,
  /** Sell */
  Sell = 2
}
export const enum OrderType {
  /** Unknown */
  Unknown = 0,
  /** Limit Order */
  LO = 1,
  /** Enhanced Limit Order */
  ELO = 2,
  /** Market Order */
  MO = 3,
  /** At-auction Order */
  AO = 4,
  /** At-auction Limit Order */
  ALO = 5,
  /** Odd Lots */
  ODD = 6,
  /** Limit If Touched */
  LIT = 7,
  /** Market If Touched */
  MIT = 8,
  /** Trailing Limit If Touched (Trailing Amount) */
  TSLPAMT = 9,
  /** Trailing Limit If Touched (Trailing Percent) */
  TSLPPCT = 10,
  /** Trailing Market If Touched (Trailing Amount) */
  TSMAMT = 11,
  /** Trailing Market If Touched (Trailing Percent) */
  TSMPCT = 12,
  /** Special Limit Order */
  SLO = 13
}
/** Order tag */
export const enum OrderTag {
  /** Unknown */
  Unknown = 0,
  /** Normal Order */
  Normal = 1,
  /** Long term Order */
  LongTerm = 2,
  /** Grey Order */
  Grey = 3,
  /** Force Selling */
  MarginCall = 4,
  /** OTC */
  Offline = 5,
  /** Option Exercise Long */
  Creditor = 6,
  /** Option Exercise Short */
  Debtor = 7,
  /** Wavier Of Option Exercise */
  NonExercise = 8,
  /** Trade Allocation */
  AllocatedSub = 9
}
/** Trigger status */
export const enum TriggerStatus {
  /** Unknown */
  Unknown = 0,
  /** Deactive */
  Deactive = 1,
  /** Active */
  Active = 2,
  /** Released */
  Released = 3
}
export const enum Market {
  /** Unknown */
  Unknown = 0,
  /** US market */
  US = 1,
  /** HK market */
  HK = 2,
  /** CN market */
  CN = 3,
  /** SG market */
  SG = 4
}
export const enum Language {
  /** zh-CN */
  ZH_CN = 0,
  /** zh-HK */
  ZH_HK = 1,
  /** en */
  EN = 2
}
/** Configuration for LongPort sdk */
export class Config {
  /** Create a new `Config` */
  constructor(params: ConfigParams)
  /**
   * Create a new `Config` from the given environment variables
   *
   * It first gets the environment variables from the `.env` file in the
   * current directory.
   *
   * # Variables
   *
   * - `LONGPORT_APP_KEY` - App key
   * - `LONGPORT_APP_SECRET` - App secret
   * - `LONGPORT_ACCESS_TOKEN` - Access token
   * - `LONGPORT_HTTP_URL` - HTTP endpoint url
   * - `LONGPORT_TRADE_WS_URL` - Trade websocket endpoint url
   */
  static fromEnv(): Config
}
export class Decimal {
  static E(): Decimal
  static E_INVERSE(): Decimal
  static HALF_PI(): Decimal
  static MAX(): Decimal
  static MIN(): Decimal
  static NEGATIVE_ONE(): Decimal
  static ONE(): Decimal
  static ONE_HUNDRED(): Decimal
  static ONE_THOUSAND(): Decimal
  static PI(): Decimal
  static QUARTER_PI(): Decimal
  static TEN(): Decimal
  static TWO(): Decimal
  static TWO_PI(): Decimal
  static ZERO(): Decimal
  constructor(value: string | number)
  static newWithScale(num: number, scale: number): Decimal
  toString(): string
  toNumber(): number
  /** Computes the absolute value. */
  abs(): Decimal
  /** Returns the smallest integer greater than or equal to a number. */
  ceil(): Decimal
  /** Returns the largest integer less than or equal to a number. */
  floor(): Decimal
  /** Returns a new Decimal representing the fractional portion of the number. */
  fract(): Decimal
  /** Returns `true` if the decimal is negative. */
  isNegative(): boolean
  /** Returns `true` if the decimal is positive. */
  isPositive(): boolean
  /** Returns `true` if this Decimal number is equivalent to zero. */
  isZero(): boolean
  /** Returns the maximum of the two numbers. */
  max(other: Decimal): Decimal
  /** Returns the minimum of the two numbers. */
  min(other: Decimal): Decimal
  /** Strips any trailing zero’s from a Decimal and converts `-0` to `0`. */
  normalize(): Decimal
  /**
   * Returns a new Decimal number with no fractional portion (i.e. an
   * integer). Rounding currently follows “Bankers Rounding” rules. e.g.
   * `6.5` -> `6`, `7.5` -> `8`
   */
  round(): Decimal
  /**
   * Returns a new Decimal integral with no fractional portion. This is a
   * true truncation whereby no rounding is performed.
   */
  trunc(): Decimal
  /** Performs the `+` operation. */
  add(other: Decimal): Decimal
  /** Performs the `-` operation. */
  sub(other: Decimal): Decimal
  /** Performs the `*` operation. */
  mul(other: Decimal): Decimal
  /** Performs the `/` operation. */
  div(other: Decimal): Decimal
  /** Performs the `%` operation. */
  rem(other: Decimal): Decimal
  /** Performs the unary `-` operation. */
  neg(): Decimal
  /**
   * Returns `true` if the value of this Decimal is greater than the value of
   * `x`, otherwise returns `false`.
   */
  greaterThan(other: Decimal): boolean
  /**
   * Returns `true` if the value of this Decimal is greater than or equal to
   * the value of `x`, otherwise returns `false`.
   */
  greaterThanOrEqualTo(other: Decimal): boolean
  /**
   * Returns `true` if the value of this Decimal equals the value of `x`,
   * otherwise returns `false`.
   */
  equals(other: Decimal): boolean
  /**
   * Returns `true` if the value of this Decimal is less than the value of
   * `x`, otherwise returns `false`.
   */
  lessThan(other: Decimal): boolean
  /**
   * Returns `true` if the value of this Decimal is less than or equal to the
   * value of `x`, otherwise returns `false`.
   */
  lessThanOrEqualTo(other: Decimal): boolean
  /**
   * Compares the values of two Decimals.
   *
   * Returns `-1` if the value of this Decimal is less than the value of
   * `x`.
   *
   * Returns `1` if the value of this Decimal is greater than the value of
   * `x`.
   *
   * Returns `0` if the value of this Decimal equals the value of `x`.
   */
  comparedTo(other: Decimal): number
  /** Computes the sine of a number (in radians) */
  sin(): this
  /** Computes the cosine of a number (in radians) */
  cos(): this
  /**
   * Computes the tangent of a number (in radians). Panics upon overflow or
   * upon approaching a limit.
   */
  tan(): this
  /** The square root of a Decimal. Uses a standard Babylonian method. */
  sqrt(): this
  /**
   * Raise self to the given Decimal exponent: x<sup>y</sup>. If `exp` is not
   * whole then the approximation e<sup>y*ln(x)</sup> is used.
   */
  pow(exp: Decimal): this
  /**
   * Calculates the natural logarithm for a Decimal calculated using Taylor’s
   * series.
   */
  ln(): this
  /** Calculates the base 10 logarithm of a specified Decimal number. */
  log10(): this
  /**
   * The estimated exponential function, ex. Stops calculating when it is
   * within tolerance of roughly `0.0000002`.
   */
  exp(): this
  /**
   * The estimated exponential function, e<sup>x</sup> using the `tolerance`
   * provided as a hint as to when to stop calculating. A larger
   * tolerance will cause the number to stop calculating sooner at the
   * potential cost of a slightly less accurate result.
   */
  expWithTolerance(tolerance: Decimal): this
  /** Abramowitz Approximation of Error Function from [wikipedia](https://en.wikipedia.org/wiki/Error_function#Numerical_approximations) */
  erf(): Decimal
  /** The Cumulative distribution function for a Normal distribution */
  normCdf(): Decimal
  /** The Probability density function for a Normal distribution. */
  normPdf(): this
}
export class HttpClient {
  constructor(httpUrl: string, appKey: string, appSecret: string, accessToken: string)
  /**
   * Create a new `HttpClient` from the given environment variables
   *
   * It first gets the environment variables from the `.env` file in the
   * current directory.
   *
   * # Variables
   *
   * - `LONGPORT_HTTP_URL` - HTTP endpoint url
   * - `LONGPORT_APP_KEY` - App key
   * - `LONGPORT_APP_SECRET` - App secret
   * - `LONGPORT_ACCESS_TOKEN` - Access token
   */
  static fromEnv(): HttpClient
  /** Performs a HTTP request */
  request(method: string, path: string, headers?: Record<string, string> | undefined | null, body?: any | undefined | null): Promise<any>
}
/** Naive date type */
export class NaiveDate {
  constructor(year: number, month: number, day: number)
  get year(): number
  get month(): number
  get day(): number
  toString(): string
}
/** Time type */
export class Time {
  constructor(hour: number, minute: number, second: number)
  get hour(): number
  get monute(): number
  get toString(): string
}
/** Naive datetime type */
export class NaiveDatetime {
  constructor(date: NaiveDate, time: Time)
  get date(): NaiveDate
  get time(): Time
  toString(): string
}
/** Trade context */
export class TradeContext {
  static new(config: Config): Promise<TradeContext>
  /**
   * Set order changed callback, after receiving the order changed event, it
   * will call back to this function.
   */
  setOnOrderChanged(callback: (err: null | Error, event: PushOrderChanged) => void): void
  /**
   * Subscribe
   *
   * #### Example
   *
   * ```javascript
   * const {
   *  Config,
   *  TradeContext,
   *  Decimal,
   *  OrderSide,
   *  TimeInForceType,
   *  OrderType,
   *  TopicType,
   * } = require("longport");
   *
   * let config = Config.fromEnv();
   * let ctx = await TradeContext.new(config)
   * ctx.setOnQuote((_, event) => console.log(event.toString()));
   * await ctx.subscribe([TopicType.Private]);
   * ```
   */
  subscribe(topics: Array<TopicType>): Promise<void>
  /** Unsubscribe */
  unsubscribe(topics: Array<TopicType>): Promise<void>
}
/** Order changed message */
export class PushOrderChanged {
  toString(): string
  /** Order side */
  get side(): OrderSide
  /** Stock name */
  get stockName(): string
  /** Submitted quantity */
  get submittedQuantity(): number
  /** Order symbol */
  get symbol(): string
  /** Order type */
  get orderType(): OrderType
  /** Submitted price */
  get submittedPrice(): Decimal
  /** Executed quantity */
  get executedQuantity(): number
  /** Executed price */
  get executedPrice(): Decimal | null
  /** Order ID */
  get orderId(): string
  /** Currency */
  get currency(): string
  /** Order status */
  get status(): OrderStatus
  /** Submitted time */
  get submittedAt(): Date
  /** Last updated time */
  get updatedAt(): Date
  /** Order trigger price */
  get triggerPrice(): Decimal | null
  /** Rejected message or remark */
  get msg(): string
  /** Order tag */
  get tag(): OrderTag
  /** Conditional order trigger status */
  get triggerStatus(): TriggerStatus | null
  /** Conditional order trigger time */
  get triggerAt(): Date | null
  /** Trailing amount */
  get trailingAmount(): Decimal | null
  /** Trailing percent */
  get trailingPercent(): Decimal | null
  /** Limit offset amount */
  get limitOffset(): Decimal | null
  /** Account no */
  get accountNo(): string
  /** Last share */
  get lastShare(): Decimal | null
  /** Last price */
  get lastPrice(): Decimal | null
  /** Remark message */
  get remark(): string
}
